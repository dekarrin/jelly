// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dekarrin/jelly (interfaces: ResponseGenerator)
//
// Generated by this command:
//
//	mockgen -destination tools/mocks/jelly/mock_response.go github.com/dekarrin/jelly ResponseGenerator
//

// Package mock_jelly is a generated GoMock package.
package mock_jelly

import (
	http "net/http"
	reflect "reflect"

	jelly "github.com/dekarrin/jelly"
	gomock "go.uber.org/mock/gomock"
)

// MockResponseGenerator is a mock of ResponseGenerator interface.
type MockResponseGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockResponseGeneratorMockRecorder
}

// MockResponseGeneratorMockRecorder is the mock recorder for MockResponseGenerator.
type MockResponseGeneratorMockRecorder struct {
	mock *MockResponseGenerator
}

// NewMockResponseGenerator creates a new mock instance.
func NewMockResponseGenerator(ctrl *gomock.Controller) *MockResponseGenerator {
	mock := &MockResponseGenerator{ctrl: ctrl}
	mock.recorder = &MockResponseGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseGenerator) EXPECT() *MockResponseGeneratorMockRecorder {
	return m.recorder
}

// BadRequest mocks base method.
func (m *MockResponseGenerator) BadRequest(arg0 string, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BadRequest", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// BadRequest indicates an expected call of BadRequest.
func (mr *MockResponseGeneratorMockRecorder) BadRequest(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadRequest", reflect.TypeOf((*MockResponseGenerator)(nil).BadRequest), varargs...)
}

// Conflict mocks base method.
func (m *MockResponseGenerator) Conflict(arg0 string, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Conflict", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Conflict indicates an expected call of Conflict.
func (mr *MockResponseGeneratorMockRecorder) Conflict(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conflict", reflect.TypeOf((*MockResponseGenerator)(nil).Conflict), varargs...)
}

// Created mocks base method.
func (m *MockResponseGenerator) Created(arg0 any, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Created", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockResponseGeneratorMockRecorder) Created(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockResponseGenerator)(nil).Created), varargs...)
}

// Err mocks base method.
func (m *MockResponseGenerator) Err(arg0 int, arg1, arg2 string, arg3 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Err", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockResponseGeneratorMockRecorder) Err(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockResponseGenerator)(nil).Err), varargs...)
}

// Forbidden mocks base method.
func (m *MockResponseGenerator) Forbidden(arg0 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Forbidden", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Forbidden indicates an expected call of Forbidden.
func (mr *MockResponseGeneratorMockRecorder) Forbidden(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forbidden", reflect.TypeOf((*MockResponseGenerator)(nil).Forbidden), arg0...)
}

// InternalServerError mocks base method.
func (m *MockResponseGenerator) InternalServerError(arg0 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalServerError", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError.
func (mr *MockResponseGeneratorMockRecorder) InternalServerError(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockResponseGenerator)(nil).InternalServerError), arg0...)
}

// MethodNotAllowed mocks base method.
func (m *MockResponseGenerator) MethodNotAllowed(arg0 *http.Request, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MethodNotAllowed", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// MethodNotAllowed indicates an expected call of MethodNotAllowed.
func (mr *MockResponseGeneratorMockRecorder) MethodNotAllowed(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodNotAllowed", reflect.TypeOf((*MockResponseGenerator)(nil).MethodNotAllowed), varargs...)
}

// NoContent mocks base method.
func (m *MockResponseGenerator) NoContent(arg0 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NoContent", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// NoContent indicates an expected call of NoContent.
func (mr *MockResponseGeneratorMockRecorder) NoContent(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoContent", reflect.TypeOf((*MockResponseGenerator)(nil).NoContent), arg0...)
}

// NotFound mocks base method.
func (m *MockResponseGenerator) NotFound(arg0 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotFound", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// NotFound indicates an expected call of NotFound.
func (mr *MockResponseGeneratorMockRecorder) NotFound(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockResponseGenerator)(nil).NotFound), arg0...)
}

// OK mocks base method.
func (m *MockResponseGenerator) OK(arg0 any, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OK", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// OK indicates an expected call of OK.
func (mr *MockResponseGeneratorMockRecorder) OK(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockResponseGenerator)(nil).OK), varargs...)
}

// Redirection mocks base method.
func (m *MockResponseGenerator) Redirection(arg0 string) jelly.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirection", arg0)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Redirection indicates an expected call of Redirection.
func (mr *MockResponseGeneratorMockRecorder) Redirection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirection", reflect.TypeOf((*MockResponseGenerator)(nil).Redirection), arg0)
}

// Response mocks base method.
func (m *MockResponseGenerator) Response(arg0 int, arg1 any, arg2 string, arg3 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Response", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockResponseGeneratorMockRecorder) Response(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockResponseGenerator)(nil).Response), varargs...)
}

// TextErr mocks base method.
func (m *MockResponseGenerator) TextErr(arg0 int, arg1, arg2 string, arg3 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TextErr", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// TextErr indicates an expected call of TextErr.
func (mr *MockResponseGeneratorMockRecorder) TextErr(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextErr", reflect.TypeOf((*MockResponseGenerator)(nil).TextErr), varargs...)
}

// Unauthorized mocks base method.
func (m *MockResponseGenerator) Unauthorized(arg0 string, arg1 ...any) jelly.Result {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unauthorized", varargs...)
	ret0, _ := ret[0].(jelly.Result)
	return ret0
}

// Unauthorized indicates an expected call of Unauthorized.
func (mr *MockResponseGeneratorMockRecorder) Unauthorized(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unauthorized", reflect.TypeOf((*MockResponseGenerator)(nil).Unauthorized), varargs...)
}
