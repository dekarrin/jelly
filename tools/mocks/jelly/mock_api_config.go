// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dekarrin/jelly (interfaces: APIConfig)
//
// Generated by this command:
//
//	mockgen -destination tools/mocks/jelly/mock_api_config.go github.com/dekarrin/jelly APIConfig
//

// Package mock_jelly is a generated GoMock package.
package mock_jelly

import (
	reflect "reflect"

	jelly "github.com/dekarrin/jelly"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIConfig is a mock of APIConfig interface.
type MockAPIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAPIConfigMockRecorder
}

// MockAPIConfigMockRecorder is the mock recorder for MockAPIConfig.
type MockAPIConfigMockRecorder struct {
	mock *MockAPIConfig
}

// NewMockAPIConfig creates a new mock instance.
func NewMockAPIConfig(ctrl *gomock.Controller) *MockAPIConfig {
	mock := &MockAPIConfig{ctrl: ctrl}
	mock.recorder = &MockAPIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIConfig) EXPECT() *MockAPIConfigMockRecorder {
	return m.recorder
}

// Common mocks base method.
func (m *MockAPIConfig) Common() jelly.CommonConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Common")
	ret0, _ := ret[0].(jelly.CommonConfig)
	return ret0
}

// Common indicates an expected call of Common.
func (mr *MockAPIConfigMockRecorder) Common() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Common", reflect.TypeOf((*MockAPIConfig)(nil).Common))
}

// FillDefaults mocks base method.
func (m *MockAPIConfig) FillDefaults() jelly.APIConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillDefaults")
	ret0, _ := ret[0].(jelly.APIConfig)
	return ret0
}

// FillDefaults indicates an expected call of FillDefaults.
func (mr *MockAPIConfigMockRecorder) FillDefaults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillDefaults", reflect.TypeOf((*MockAPIConfig)(nil).FillDefaults))
}

// Get mocks base method.
func (m *MockAPIConfig) Get(arg0 string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockAPIConfigMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPIConfig)(nil).Get), arg0)
}

// Keys mocks base method.
func (m *MockAPIConfig) Keys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockAPIConfigMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockAPIConfig)(nil).Keys))
}

// Set mocks base method.
func (m *MockAPIConfig) Set(arg0 string, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockAPIConfigMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAPIConfig)(nil).Set), arg0, arg1)
}

// SetFromString mocks base method.
func (m *MockAPIConfig) SetFromString(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFromString", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFromString indicates an expected call of SetFromString.
func (mr *MockAPIConfigMockRecorder) SetFromString(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFromString", reflect.TypeOf((*MockAPIConfig)(nil).SetFromString), arg0, arg1)
}

// Validate mocks base method.
func (m *MockAPIConfig) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAPIConfigMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAPIConfig)(nil).Validate))
}
